Make sure each project builds with PCHs off and no pch.h force include.
This is to allow easy code intergration/extraction. The PCHs are just to speed
up the build and do not introduce a file dependency since all files should
already #include necessary files.
// TODO: Make sure #includes are minimal and require the least amount of
// outside code files
Remember that right now there are platform define issues where files need
<windows.h> included before they work because of platform specific libraries.
This is currently being solved by force #including "Engine_Defines.h",
"Engine_Platform.h".

How useful would a flie finder program be?
It would take something like "#include "file.h"" and replace it with
"#include "../../Folder/file.h""
Something to think about. It is nice to allow for file movement and auto
#includes but is that just too lazy or too error prone?

Before giving away any code make sure to test #includes.
If a #include has "../../../" then it may have an issue
with projects not located at the same "depth" because the
3 directories up is not referring to the file, but rather
the working directory of the project.

Apr 6th 2018
Trying to get rid of additional include directories. Freetype2 is proving
to be rather intrusive and I don't see how to nicely change the folder structure
without altering the source #includes. I will have to check on this later.
Bullet is also dependent on a globally #included root folder.

Apr 6th 2018
Got TestGame project running by ading a reference to engine.
Is that good or bad? It might be better to remove references in the future.

Apr 9th 2018
Some services should be easier to access without worrying about restrictions
or security. Prime services would be managers or utilities that do not hold
persistent data members but instead are comprised of static or global functions.
Examples include Math, Graphics, Input(possible exception), and more.
It would be nicer/easier to access QwerkE::Math or even QMath instead of getting
the service and then manipulating it in a long call.

Apr 10th 2018
Going to need a better system for .dlls. Maybe create a folder for them and find
a way to link them nicely. There are going to be more and more with additional
libraries getting added.

Apr 13th 2018
Redesign the WindowManager() and Window() classes.